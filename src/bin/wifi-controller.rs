//! # Hardware Check
//!
//! This `libstd` program is for the ESP32-C3-DevKitC-02 board.
#![allow(unused)]
use rust_esp32_std_demo::bsc;

// Logging macros
use log::*;
use std::time::Duration;

// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;

use esp_idf_hal::peripherals::Peripherals;
use esp_idf_svc::http::server::*;
use embedded_svc::http::Method;
// use esp_idf_svc::espnow::;

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
pub struct Config {
    wifi_ssid: &'static str,
    wifi_psk: &'static str,
}

/// Entry point to our application.
///
/// It sets up a Wi-Fi connection to the Access Point given in the
/// configuration, then blinks the RGB LED green/blue.
///
/// If the LED goes solid red, then it was unable to connect to your Wi-Fi
/// network.
fn main() -> anyhow::Result<()> {
    use bsc::led::RGB8;

    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();
    // esp_idf_svc::nvs::EspNvs::new(partition, namespace, read_write)

    #[allow(unused)]
    let peripherals = Peripherals::take().unwrap();
    #[allow(unused)]
    let pins = peripherals.pins;

    #[allow(unused)]
    let sysloop = esp_idf_svc::eventloop::EspSystemEventLoop::take()?;

    info!("Hello, world!");

    // Start the LED off yellow
    let mut led = bsc::led::WS2812RMT::new()?;
    led.set_pixel(RGB8::new(50, 50, 0))?;
    std::thread::sleep(Duration::from_secs(5));

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = Config {
        wifi_ssid: "esp32-c3",
        wifi_psk: "espresso",
    };

    // Connect to the Wi-Fi network
    let _wifi = match bsc::wifi::wifi_ap(peripherals.modem, sysloop.clone(), app_config.wifi_ssid, app_config.wifi_psk) {
        Ok(inner) => inner,
        Err(err) => {
            // Red!
            led.set_pixel(RGB8::new(50, 0, 0))?;
            anyhow::bail!("could not connect to Wi-Fi network: {:?}", err)
        }
    };

    let server_config = Configuration::default();
    let mut server = EspHttpServer::new(&server_config)?;
    server.fn_handler("/", Method::Get, |request| {
        let html = index_html();
        request.into_response(100, Some(&html), &[("", "")])?;
        Ok(())
    })?;

    println!("server awaiting connection");

    loop {
        // Blue!
        led.set_pixel(RGB8::new(0, 0, 50))?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
        // info!("Hello, world!");

        // Green!
        led.set_pixel(RGB8::new(0, 50, 0))?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from mcu!")
}

fn temperature(val: f32) -> String {
    templated(format!("chip temperature: {:.2}Â°C", val))
}
